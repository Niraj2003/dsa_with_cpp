Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-01-08T14:32:34+05:30

====== Lecture 1 - Intro to OOPS ======
Created Wednesday 08 January 2020

* OOP is just a programming paradigm:
* OOP solves some major problems which arise in procedural programming.
* As OOP is a reaction to the procedural style, its principles are nothing but solutions.
--------------------

=== Principles of OOP ===
1. **Encapsulation** - process of combining variables(data) and relevant functions into a single unit. 
	* Solution - Minimizes parameters, consequently minimizing arguments.
	* Context in C++ - //class//
2. **Abstraction** - process of hiding parts of the program for maintainability purposes.
	* Solution - Simplifies the interface. Reduces the impact of change, i.e we can have a complex web of helper functions, but the interface remains the same. 
	* Context in C++ - Access control, viz //public//, //private// and //protected//, enforce 'data hiding', which is the 'tool' used to achieve abstraction.
3. **Inheritance**
	* Solution - Eliminates redundant code.
	* Context in C++ - Parent class are specified when defining a class, using the ':' symbol.
4. **Polymorphism**
	* Solution - Eliminates if/else and switch statements. Code context based functions.
	* Context in C++ - The compiler chooses the relevant version of the function. We don't have to specify while calling.

--------------------

* Idea of a class - It is just a blueprint of our custom data type. It has the data(variables) and functions.
* Idea of an object:
	An **object **is an instance of a class, and **occupies** some memory. On the other hand, class is a blueprint, so it does not occupy any memory(except on the code-section, of course).
--------------------
Syntax to create a class:
{{{code: lang="cpp" linenumbers="True"
class class_name
{
	data_type_1 attrib1;
	data_type_2 attrib2;  
	// only declarations, we can even do int marks[], i.e data structures/ other classes are also allowed
};
}}}
