Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2019-12-21T22:13:25+05:30

====== 1. Pointer Intro ======
Created Saturday 21 December 2019

Pointers exhaustive from scratch: [[https://www.youtube.com/watch?v=h-HBipu_1P0&list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_]]

Pointers are variables which hold memory addresses. 
* Size of a pointer variable is system(compiler) dependent. A memory address is basically a number. Size of a pointer does not depend on the data type it is pointing to. We can use ''sizeof'' operator to get the size of a pointer, in bytes.
* How Ankush wants you to think: All variables are on RAM. 
* Jump(memory blocks to read) is decided by using a **symbol table**. It has atleast 3 columns. (Name, type, starting_address). Here type is used to get the jump.
* Symbol table can have two differently named variables for the same address. This is how **references** are implemented.
* It is wrong to assume that a 32 bit architecture will always use 8 bytes for pointer 4 bytes for an integer. This is mostly true, but not guaranteed, so any code which assumes this is not portable.

__Declaration__: 
* for single pointer variable. ''data_type *variable1;''
* for multiple pointers on the same line, ''data_type *v1, *v2 ...''
* This means that we can declare normal and pointer variables on the same line.
NOTE: Always initialize pointer to ''nullptr'' or ''NULL'' or ''0''. ''nullptr'' is recommended.

__Assignment(of address)__: 
* ''p_variable = &normal_variable''
* ''p_variable = pointerVariable''
* ''&'' is called the "address of" operator, it looks up the ''starting_address'' of the given variable(from the symbol table).
* We can declare a pointer for a pointer using 2 asterisks. Remember that a variable of type "pointer to pointer ... to pointer" is the same as a single level pointer variable(if we look at the lookup table). Of course, the content is context specific.

__Dereference__: 
* Interacting(i.e //reading/writing//) value of the variable using its pointer variable is called a dereference. The pointer **needs **to be a valid address and a have a jump(i.e not be a ''void'' pointer). 
* void pointers cannot be derefenced(jump size is undefined). 
* A pointer with an invalid address(i.e NULL or nullptr or 0) cannot be dereferenced. Hence, NULL is used as a sentinel value.

__Jargon__: https://www.youtube.com/watch?v=uvw5bZZT3pM
* "points to" means that a pointer variable holds the starting_address and jump for the intended memory location(used interchangeably with **address**).
* **wild pointer** - an uninitialized pointer.
* **dangling pointer **- a pointer pointing to a inexistent variable, i.e the variable has been **deallocated or destroyed or has gone out_of_scope. ** This can lead to segmentation faults/crashes. **Another **scenario is with a static variable. Here due to the declaration static, the statement is ignored, and the value is not initialized(everytime).
* **void pointer** means a pointer whose type field(in the symbol table) is undefined. So it cannot be dereferenced(coz we don't know how much to jump). **They are used for storing addresses alone. **
* **NULL pointer**, has a value of zero, which may be character or integer or long depending on the compiler. So it's better to use nullptr. NULL can be safely assumed to be false and numerical zero and EOS character.
